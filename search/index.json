[{"content":"一、文件描述符 文件描述符（file descriptor） 是一个非负整数，对于内核而言，所有打开的文件都通过文件描述符引用。当创建一个新文件或打开一个现有文件时，内核向进程返回一个文件描述符。\n按照惯例，UNIX 系统 shell 把文件描述符 0 跟进程的标准输入关联，1 跟标准输出关联，2 跟标准错误关联。\n文件描述符的变化范围因系统而异，为 0 ~ OPEN_MAX - 1。早期的 UNIX 系统实现采用的上限值是 19，现在的系统大多数将上限值提升至 63。对于其他一些系统，文件描述符的变化范围是无限的，它只受到系统配置的存储器总量、整形的字长以及系统管理员所配置的软限制和硬限制的约束。\n二、函数 open 和 openat 1 2 3 4 5 6 7 #include \u0026lt;fcntl.h\u0026gt; int open(const char *path, int oflag, ... /* mode_t mode */); int openat(int fd, const char *path, int oflag, ... /* mode_t mode */); 两函数的返回值：若成功，返回文件描述符；若出错，返回 -1 最后一个参数写为 \u0026hellip;，ISO C 用这种方法表明余下的参数的数量及其类型是可变的。\n对于 open 函数而言，仅当创建新文件时才使用最后这个参数。\n由 open 和 openat 函数返回的文件描述符一定是最小的未用的描述符值。\nopen 和 openat 函数的区别在于：\npath 参数指定的是绝对路径名，这种情况下，fd 参数将被忽略，openat 函数就相当于 open 函数。 path 参数指定的是相对路径名，fd 参数指出了相对路径名在文件系统中的开始地址。fd 参数是通过打开相对路径名所在的目录来获取的。 path 参数指定了相对路径名，fd 参数具有特殊值 AT_FDCWD。这种情况下，路径名在当前工作目录中获取，openat 函数在操作上与 open 函数类似。 AT_FDCWD ，该宏的值是 -100，它主要用来指示 openat 应使用当前工作目录。\nopenat 函数是 POSIX.1 最新版本中新增的一类函数之一，希望解决两个问题：\n让线程可以使用相对路径名打开文件，而不再只能打开当前工作目录。 可以避免 time-of-check-to-time-of-use（TOCTTOU） 错误。 TOCTTOU 错误的基本思想是：如果有两个基于文件的系统调用，其中第二个调用依赖于第一个调用的结果，那么程序就是脆弱的。因为两个调用不是原子操作，在两个调用之间，文件可能改变了，这也就造成了第一个调用的结果不再有效，使得程序的最终结果是错误的。\n三、函数 creat 1 2 3 4 5 #include \u0026lt;fcntl.h\u0026gt; int creat(const char *path, mode_t mode); 返回值：若成功，返回为只写打开的文件描述符；若出错，返回 -1 creat 函数一个不足之处在于它以 只写 方式打开所创建的文件。\n四、函数 close 1 2 3 4 #include \u0026lt;unistd.h\u0026gt; int close(int fd); 返回值：若成功，返回 0；若出错，返回 -1 关闭一个文件时，会释放该进程加在该文件上的所有记录锁。\n当一个进程终止时，内核会自动关闭它所有打开的文件。\n五、函数 lseek 每个打开文件都有一个与其相关联的 “当前文件偏移量”（current file offset）。它通常是一个非负整数，用以度量从文件开始处计算的字节数。通常，读、写操作都从当前文件偏移处开始，并使偏移量增加所读写的字节数。按系统默认的情况，当打开一个新文件时，除非指定 O_APPEND 选项，否则该偏移量被设置为 0。\n1 2 3 4 5 #include \u0026lt;unistd.h\u0026gt; off_t lseek(int fd, off_t offset, int whence); 返回值：若成功，返回新的文件偏移量；若出错，返回 -1 对参数 offset 的解释与参数 whence 的值有关。\n若 whence 是 SEEK_SET，则将该文件的偏移量设置为距文件开始处 offset 个字节。 若 whence 是 SEEK_CUR，则将该文件的偏移量设置为当前值加上 offset 个字节，offset 可正可负。 若 whence 是 SEEK_END，则将该文件的偏移量设置为文件长度加上 offset，offset 可正可负。 通常，文件的当前偏移量应该是一个非负整数，但是，某些设备也可能允许负的偏移量。但对于普通文件，其偏移量必须是一个非负值。因为偏移量可能是负值，所以在比较 lseek 的返回值时，不应检测它是否小于 0，而应该检测它是否等于 -1。\nlseek 仅将当前偏移量记录在内核中，它并不引起任何的 I/O 操作。然后，该偏移量用于下一次的读或写操作。\n文件偏移量可以大于文件的当前长度，在这种情况下，对于文件的下一次写操作将会加长该文件，并在文件中造成一个空洞，这一点是允许的。位于文件中但没有写过的字节被读为 0。文件的空洞并不要求在磁盘上占用存储区。具体处理方式与文件系统的实现有关，当定位到超出文件尾端之后写时，对于新写的数据需要分配磁盘块，但是对于原文件尾端和新开始写位置之间的部分则不需要分配磁盘块。\n文件空洞示例： 因为 lseek 使用的偏移量是用 off_t 类型表示的，所以允许具体实现根据各自特定的平台自行选择大小合适的数据类型。现今大多数平台提供两组接口以处理文件偏移量。一组使用 32 位文件偏移量，另一组使用 64 位文件偏移量。\n注意：尽管可以实现 64 位文件偏移量，但是能否创建一个大于 2GB（$2^{31}$ - 1 字节）的文件则依赖于底层文件系统的类型。\n六、函数 read 1 2 3 4 5 #include \u0026lt;unistd.h\u0026gt; ssize_t read(int fd, void *buf, size_t nbytes); 返回值：读到的字节数，若已到文件尾，返回 0；若出错，返回 -1 有多种情况可使实际读到的字节数少于要求读的字节数：\n读普通文件时，在读到要求字节数之前已经到达了文件尾端。 当从终端设备读时，通常一次最多读一行。 当从网络读时，网络中的缓冲机制可能造成返回值小于所要求读的字节数。 当从管道或 FIFO 读时，如若管道包含的字节少于所需的数量，那么 read 将只返回实际可用的字节数。 当从某些面向记录的设备（如磁带）读时，一次最多返回一个记录。 当一信号造成终端，而已经读了部分数据量时。 读操作从文件的当前偏移量开始，在成功返回之前，该偏移量将增加实际读到的字节数。\n七、函数 write 1 2 3 4 5 #include \u0026lt;unistd.h\u0026gt; ssize_t write(int fd, const void *buf, size_t nbytes); 返回值：若成功，返回已写的字节数；若出错，返回 -1 其返回值通常与参数 nbytes 的值相同，否则表示出错。write 出错的一个常见原因是磁盘写满，或者是超过了一个给定进程的文件长度限制。\n对于普通文件，写操作从文件的当前偏移量开始。如果在打开文件时，指定了 O_APPEND 选项，则在每次写操作之前，将文件偏移量设置在文件的当前结尾处。在一次写操作成功后，该文件偏移量增加实际写的字节数。\n八、I/O 的效率 下图显示了用 20 种不同的缓冲区长度，读 516 581 760 字节的文件所得到的结果。 此测试所用的文件系统是 Linux ext4 文件系统，其磁盘块长度为 4 096 字节，图中 CPU 时间的几个最小值差不多出现在 BUFFSIZE 为 4 096 及以后得位置，继续增加缓冲区长度对此时间几乎没有影响。\n大多数文件系统为改善性能都采用某种 预读（read ahead） 技术。当检测到正进行顺序读取时，系统就试图读入比应用要求的更多数据，并假想应用很快就会读这些数据。从图中可以看出，缓冲区长度小至 32 字节时的时钟时间与拥有较大缓冲区长度时的时钟时间几乎一样。\n","date":"2023-02-09T15:18:07+08:00","image":"https://www.imxiejie.me/p/%E6%96%87%E4%BB%B6-i/o/unix-book_hu4547a7503b7987387e6e836bc31e69b7_54147_120x120_fill_q75_box_smart1.jpeg","permalink":"https://www.imxiejie.me/p/%E6%96%87%E4%BB%B6-i/o/","title":"文件 I/O"},{"content":"一、UNIX 体系结构 严格意义上说，可以将操作系统定义为一种软件，它控制着计算机硬件资源，提供程序运行环境，通常将这种软件称为 内核（kernel），因为它相对较小，而且位于环境的核心。\n内核的接口称为 系统调用（system call），公用函数库 建立在系统调用之上，应用程序既可以使用公用函数库，也可以使用系统调用。\nshell 是一个特殊的应用程序，其为运行其他应用程序提供了一个接口。\n二、登录 用户登录 UNIX 系统时，先键入登录名，后键入口令。系统在其口令文件（通常为/etc/passwd）查看登录名。\nroot:x:0:0:root:/root:/bin/bash\n口令中间中的登录项由 7 个以冒号分割的字段组成，依次是：登录名（root）、加密口令（x）、用户 ID（UID 0）、用户组 ID（GID 0）、注释字段（root）、起始目录（/root）以及 shell 程序（/bin/bash）。\n三、文件和目录 1. 文件系统 UNIX 文件系统是目录和文件的一种层次结构，所有东西的起点都是称为 根（root） 的目录，这个目录的名称是一个字符 / 。\n目录（directory） 是一个包含目录项的文件。在逻辑上，可以认为每个目录项都包含一个文件名，同时还包含说明该文件属性的信息。文件属性是指文件类型（是普通文件还是目录等）、文件大小、文件所有者、文件权限（其他用户能否访问该文件）以及文件最后的修改时间等。\n2. 文件名 目录中各个名字称为 文件名（filename）。只有 斜线（/） 和 空字符 这两个字符不能出现在文件名中。斜线用来分隔构成路径名的各文件名，空字符用来终止一个路径名。\n创建新目录时会自动创建两个文件名：.（称为点） 和 ..（称为点点）。点指向当前目录，点点指向父目录。在最高层次的根目录中，点和点点没有区别。\n3. 路径名 路径名（pathname） 是由一个或多个文件名组成的序列，文件名之间用斜线分隔。如：/usr/local/include。\n以斜线开头的路径名称为 绝对路径（absolute pathname），否则称为 相对路径（relative pathname）。相对路径指向相对于当前目录的文件。文件系统根的名字 / 是一个特殊的绝对路径名，它不包含文件名。\n4. 工作目录 每个进程都有一个 工作目录（working directory），所有的相对路径名都从工作目录开始解释。\n5. 起始目录 在登录时，工作目录被设置为 起始目录（home directory），可从口令文件中获得。\n四、输入和输出 1. 文件描述符 文件描述符（file descriptor） 通常是一个小的非负整数，内核用以标识一个特定进程正在访问的文件。当内核创建一个新文件或打开一个现有文件，都将返回一个文件描述符。在进行读、写操作时，都可以使用和这个文件描述符。\n2. 标准输入、标准输出和标准错误 按惯例，每当运行一个新程序时，所有的 shell 都会为其打开 3 个文件描述符，分别是 标准输入（standard input）、标准输出（standard output） 和 标准错误（standard error），相对应的描述符 ID 分别为 0、1、2。如果不做特殊处理，则这 3 个描述符都链接向终端。\n3. 不带缓冲的 I/O 函数 open、read、write、lseek 以及 close 提供了不带缓冲的 I/O，这些函数都使用文件描述符。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 // 从标准输入读，并向标准输出写 #include \u0026#34;apue.h\u0026#34; #define BUFFSIZE 4096 int main(void) { int n; char buf[BUFFSIZE]; while ((n = read(STDIN_FILENO, buf, BUFFSIZE)) \u0026gt; 0) { if (write(STDOUT_FILENO, buf, n) != n) { err_sys(\u0026#34;write error\u0026#34;); } } if (n \u0026lt; 0) { err_sys(\u0026#34;read error\u0026#34;); } exit(0); } 4. 标准 I/O 标准 I/O 函数为那些不带缓冲的 I/O 函数提供了一个带缓冲的接口。\n五、程序和进程 1. 程序 程序（program） 是一个存储在磁盘上某个目录的可执行文件。\n2. 进程和进程 ID 进程（process） 是指程序的执行实例，每个进程都有一个唯一的非负整数作为其 进程 ID。\n3. 进程控制 有 3 个主要用于进程控制的函数，分别为 fork、exec 和 waitpid。\n4. 线程和线程 ID 线程（thread） 是操作系统能够进行运算调度的最小单位。通常，一个进程只有一个控制线程\u0026mdash;某一时刻执行的一组机器指令。一个进程内的所有线程共享同一地址空间、文件描述符、栈以及进程相关的属性。\n同进程相同，线程也用 ID 标识。但是，线程 ID 只在其所在的进程内有意义，在另一个进程中没有意义。\n六、出错处理 当 UNIX 系统函数出错时，通常会返回一个负值，而且整形变量 errno 通常被设置为具有特定信息的值。在支持线程的环境中，多个线程共享进程地址空间，每个线程都有其局部的 errno 值，以避免一个线程干扰另一个线程。\n对于 errno 应注意两条规则。第一条规则是：如果没有出错，其值不会被例程清除。因此，仅当函数返回错误时，才检验其值。第二条规则是：任何函数都不会将 errno 设置为 0，而且在 \u0026lt;errno.h\u0026gt; 中定义的常量都不为 0。\n可将在 \u0026lt;errno.h\u0026gt; 中定义的错误分为两类：致命性的和非致命性的。对于致命性的错误，无法恢复，最多只能打印一条错误信息。对于非致命性的错误，有时可以妥善处理。\n七、用户标识 1. 用户 ID 口令文件登录项中的 用户 ID（user ID） 是一个整数值，它向系统标识各个不同的用户。系统管理员在确定一个用户的登录名的同时，确定其用户 ID。用户不能更改其用户 ID。用户 ID 为 0 的用户称为 根用户（root） 或 超级用户（superuser）。\n2. 组 ID 口令文件登录项中还包含了用户的 组 ID（group ID），组 ID 也是由系统管理员在指定用户登录名分配的。多个用户可划分在同一个组 ID，这可以使同组的成员之间共享资源（如文件）。\n组文件将组名映射为数值的组 ID，组文件通常是 /etc/group。\n3. 附属组 ID 大多数 UNIX 系统版本还允许一个用户属于另外一些组。登录时，读取文件/etc/group，寻找列有该用户作为其成员的前 16 个记录项就可以得到该用户的 附属组 ID（supplementary group ID）。\n八、信号 信号（signal） 用于通知进程发生了某种情况。进程有以下 3 种处理信号的方式。\n忽略信号。有些异常产生的后果不确定，不推荐使用这种处理方式。 按系统默认方式处理。 提供一个函数，信号发生时调用该函数，这称为捕捉该信号。 当向一个进程发送信号时，我们必须是那个进程的所有者或者是超级用户。\n九、时间值 历史上，UNIX 使用过两种不同的时间值。\n日历时间，该值是自 协调世界时（Coordinated Universal Time，UTC） 1970 年 1 月 1 日 00:00:00 这个特定时间以为所经过的秒数。\n系统基本数据类型 time_t 用于保存这种时间值。 进程时间，也被称为 CPU 时间，用以度量进程使用的中央处理器资源。进程时间以时钟滴答计算，每秒钟曾取为 50、60 或 100 个时钟滴答。\n系统基本类型 clock_t 用于保存这种时间值。 UNIX 系统为一个进程维护了 3 个进程时间值：\n时钟时间 用户 CPU 时间 系统 CPU 时间 时钟时间 又称为 墙上时钟时间（wall clock time），它是进程运行的时间总量，其值与系统中同时运行的进程数量有关。\n用户 CPU 时间 是指执行用户指令所用的时间量。\n系统 CPU 时间 是指为该进程执行内核程序所用的时间量。\n十、系统调用和库函数 应用程序既可以调用系统调用也可以调用库函数。很多库函数则会调用系统调用。\n系统调用和库函数之间的一个差别是：系统调用通常提供一种最小接口，而库函数通常提供比较复杂的功能。\n","date":"2023-02-08T16:57:53+08:00","image":"https://www.imxiejie.me/p/unix-%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/unix-book_hu4547a7503b7987387e6e836bc31e69b7_54147_120x120_fill_q75_box_smart1.jpeg","permalink":"https://www.imxiejie.me/p/unix-%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/","title":"UNIX 基础知识"}]