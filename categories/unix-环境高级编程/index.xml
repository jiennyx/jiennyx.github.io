<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>UNIX 环境高级编程 on imxiejie</title>
        <link>https://www.imxiejie.me/categories/unix-%E7%8E%AF%E5%A2%83%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B/</link>
        <description>Recent content in UNIX 环境高级编程 on imxiejie</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <lastBuildDate>Wed, 08 Feb 2023 16:57:53 +0800</lastBuildDate><atom:link href="https://www.imxiejie.me/categories/unix-%E7%8E%AF%E5%A2%83%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>UNIX 基础知识</title>
        <link>https://www.imxiejie.me/p/unix-%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</link>
        <pubDate>Wed, 08 Feb 2023 16:57:53 +0800</pubDate>
        
        <guid>https://www.imxiejie.me/p/unix-%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</guid>
        <description>&lt;img src="https://www.imxiejie.me/p/unix-%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/unix-book.jpeg" alt="Featured image of post UNIX 基础知识" /&gt;&lt;h4 id=&#34;一unix-体系结构&#34;&gt;一、UNIX 体系结构&lt;/h4&gt;
&lt;p&gt;严格意义上说，可以将操作系统定义为一种软件，它控制着计算机硬件资源，提供程序运行环境，通常将这种软件称为 &lt;strong&gt;内核（kernel）&lt;/strong&gt;，因为它相对较小，而且位于环境的核心。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.imxiejie.me/p/unix-%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/architecture.png&#34;
	width=&#34;602&#34;
	height=&#34;393&#34;
	srcset=&#34;https://www.imxiejie.me/p/unix-%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/architecture_hu75c6d5a5c75d7428e7f07f0b7ff38bf0_56994_480x0_resize_box_3.png 480w, https://www.imxiejie.me/p/unix-%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/architecture_hu75c6d5a5c75d7428e7f07f0b7ff38bf0_56994_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Architecture of the UNIX operating system&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;153&#34;
		data-flex-basis=&#34;367px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;内核的接口称为 &lt;strong&gt;系统调用（system
call）&lt;/strong&gt;，&lt;strong&gt;公用函数库&lt;/strong&gt; 建立在系统调用之上，应用程序既可以使用公用函数库，也可以使用系统调用。&lt;br&gt;
&lt;strong&gt;shell&lt;/strong&gt; 是一个特殊的应用程序，其为运行其他应用程序提供了一个接口。&lt;/p&gt;
&lt;h3 id=&#34;二登录&#34;&gt;二、登录&lt;/h3&gt;
&lt;p&gt;用户登录 UNIX
系统时，先键入登录名，后键入口令。系统在其口令文件（通常为/etc/passwd）查看登录名。&lt;br&gt;
&lt;code&gt;root:x:0:0:root:/root:/bin/bash&lt;/code&gt;&lt;br&gt;
口令中间中的登录项由 7 个以冒号分割的字段组成，依次是：登录名（root）、加密口令（x）、用户
ID（UID 0）、用户组 ID（GID 0）、注释字段（root）、起始目录（/root）以及 shell
程序（/bin/bash）。&lt;/p&gt;
&lt;h3 id=&#34;三文件和目录&#34;&gt;三、文件和目录&lt;/h3&gt;
&lt;h4 id=&#34;1-文件系统&#34;&gt;1. 文件系统&lt;/h4&gt;
&lt;p&gt;UNIX
文件系统是目录和文件的一种层次结构，所有东西的起点都是称为 &lt;strong&gt;根（root）&lt;/strong&gt; 的目录，这个目录的名称是一个字符 &lt;code&gt;/&lt;/code&gt; 。&lt;br&gt;
&lt;strong&gt;目录（directory）&lt;/strong&gt;
是一个包含目录项的文件。在逻辑上，可以认为每个目录项都包含一个文件名，同时还包含说明该文件属性的信息。文件属性是指文件类型（是普通文件还是目录等）、文件大小、文件所有者、文件权限（其他用户能否访问该文件）以及文件最后的修改时间等。&lt;/p&gt;
&lt;h4 id=&#34;2-文件名&#34;&gt;2. 文件名&lt;/h4&gt;
&lt;p&gt;目录中各个名字称为 &lt;strong&gt;文件名（filename）&lt;/strong&gt;。只有 &lt;strong&gt;斜线（/）&lt;/strong&gt; 和 &lt;strong&gt;空字符&lt;/strong&gt;
这两个字符不能出现在文件名中。斜线用来分隔构成路径名的各文件名，空字符用来终止一个路径名。&lt;br&gt;
创建新目录时会自动创建两个文件名：&lt;strong&gt;.（称为点）&lt;/strong&gt;
和 &lt;strong&gt;..（称为点点）&lt;/strong&gt;。点指向当前目录，点点指向父目录。在最高层次的根目录中，点和点点没有区别。&lt;/p&gt;
&lt;h4 id=&#34;3-路径名&#34;&gt;3. 路径名&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;路径名（pathname）&lt;/strong&gt; 是由一个或多个文件名组成的序列，文件名之间用斜线分隔。如：&lt;code&gt;/usr/local/include&lt;/code&gt;。&lt;br&gt;
以斜线开头的路径名称为 &lt;strong&gt;绝对路径（absolute pathname）&lt;/strong&gt;，否则称为
&lt;strong&gt;相对路径（relative
pathname）&lt;/strong&gt;。相对路径指向相对于当前目录的文件。文件系统根的名字 &lt;code&gt;/&lt;/code&gt;
是一个特殊的绝对路径名，它不包含文件名。&lt;/p&gt;
&lt;h4 id=&#34;4-工作目录&#34;&gt;4. 工作目录&lt;/h4&gt;
&lt;p&gt;每个进程都有一个 &lt;strong&gt;工作目录（working
directory）&lt;/strong&gt;，所有的相对路径名都从工作目录开始解释。&lt;/p&gt;
&lt;h4 id=&#34;5-起始目录&#34;&gt;5. 起始目录&lt;/h4&gt;
&lt;p&gt;在登录时，工作目录被设置为 &lt;strong&gt;起始目录（home directory）&lt;/strong&gt;，可从口令文件中获得。&lt;/p&gt;
&lt;h3 id=&#34;四输入和输出&#34;&gt;四、输入和输出&lt;/h3&gt;
&lt;h4 id=&#34;1-文件描述符&#34;&gt;1. 文件描述符&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;文件描述符（file descriptor）&lt;/strong&gt;
通常是一个小的非负整数，内核用以标识一个特定进程正在访问的文件。当内核创建一个新文件或打开一个现有文件，都将返回一个文件描述符。在进行读、写操作时，都可以使用和这个文件描述符。&lt;/p&gt;
&lt;h4 id=&#34;2-标准输入标准输出和标准错误&#34;&gt;2. 标准输入、标准输出和标准错误&lt;/h4&gt;
&lt;p&gt;按惯例，每当运行一个新程序时，所有的 shell 都会为其打开 3 个文件描述符，分别是
&lt;strong&gt;标准输入（standard input）&lt;/strong&gt;、&lt;strong&gt;标准输出（standard output）&lt;/strong&gt;
和 &lt;strong&gt;标准错误（standard error）&lt;/strong&gt;，相对应的描述符 ID 分别为
0、1、2。如果不做特殊处理，则这 3 个描述符都链接向终端。&lt;/p&gt;
&lt;h4 id=&#34;3-不带缓冲的-io&#34;&gt;3. 不带缓冲的 I/O&lt;/h4&gt;
&lt;p&gt;函数 &lt;strong&gt;open&lt;/strong&gt;、&lt;strong&gt;read&lt;/strong&gt;、&lt;strong&gt;write&lt;/strong&gt;、&lt;strong&gt;lseek&lt;/strong&gt; 以及 &lt;strong&gt;close&lt;/strong&gt; 提供了不带缓冲的
I/O，这些函数都使用文件描述符。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// 从标准输入读，并向标准输出写
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;#include&lt;/span&gt; &lt;span class=&#34;cpf&#34;&gt;&amp;#34;apue.h&amp;#34;&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;#define BUFFSIZE 4096
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;buf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;BUFFSIZE&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;k&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;n&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;read&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;STDIN_FILENO&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;buf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;BUFFSIZE&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;write&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;STDOUT_FILENO&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;buf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;nf&#34;&gt;err_sys&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;write error&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;n&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nf&#34;&gt;err_sys&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;read error&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nf&#34;&gt;exit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h4 id=&#34;4-标准-io&#34;&gt;4. 标准 I/O&lt;/h4&gt;
&lt;p&gt;标准 I/O 函数为那些不带缓冲的 I/O 函数提供了一个带缓冲的接口。&lt;/p&gt;
&lt;h3 id=&#34;五程序和进程&#34;&gt;五、程序和进程&lt;/h3&gt;
&lt;h4 id=&#34;1-程序&#34;&gt;1. 程序&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;程序（program）&lt;/strong&gt; 是一个存储在磁盘上某个目录的可执行文件。&lt;/p&gt;
&lt;h4 id=&#34;2-进程和进程-id&#34;&gt;2. 进程和进程 ID&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;进程（process）&lt;/strong&gt; 是指程序的执行实例，每个进程都有一个唯一的非负整数作为其
&lt;strong&gt;进程 ID&lt;/strong&gt;。&lt;/p&gt;
&lt;h4 id=&#34;3-进程控制&#34;&gt;3. 进程控制&lt;/h4&gt;
&lt;p&gt;有 3 个主要用于进程控制的函数，分别为 &lt;strong&gt;fork&lt;/strong&gt;、&lt;strong&gt;exec&lt;/strong&gt; 和 &lt;strong&gt;waitpid&lt;/strong&gt;。&lt;/p&gt;
&lt;h4 id=&#34;4-线程和线程-id&#34;&gt;4. 线程和线程 ID&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;线程（thread）&lt;/strong&gt;
是操作系统能够进行运算调度的最小单位。通常，一个进程只有一个控制线程&amp;mdash;某一时刻执行的一组机器指令。一个进程内的所有线程共享同一地址空间、文件描述符、栈以及进程相关的属性。&lt;br&gt;
同进程相同，线程也用 ID 标识。但是，线程 ID
只在其所在的进程内有意义，在另一个进程中没有意义。&lt;/p&gt;
&lt;h3 id=&#34;六出错处理&#34;&gt;六、出错处理&lt;/h3&gt;
&lt;p&gt;当 UNIX 系统函数出错时，通常会返回一个负值，而且整形变量 &lt;strong&gt;errno&lt;/strong&gt;
通常被设置为具有特定信息的值。在支持线程的环境中，多个线程共享进程地址空间，每个线程都有其局部的 &lt;strong&gt;errno&lt;/strong&gt;
值，以避免一个线程干扰另一个线程。&lt;br&gt;
对于 &lt;strong&gt;errno&lt;/strong&gt;
应注意两条规则。第一条规则是：如果没有出错，其值不会被例程清除。因此，仅当函数返回错误时，才检验其值。第二条规则是：任何函数都不会将 &lt;strong&gt;errno&lt;/strong&gt; 设置为 0，而且在 &lt;strong&gt;&amp;lt;errno.h&amp;gt;&lt;/strong&gt; 中定义的常量都不为 0。&lt;br&gt;
可将在 &lt;strong&gt;&amp;lt;errno.h&amp;gt;&lt;/strong&gt;
中定义的错误分为两类：致命性的和非致命性的。对于致命性的错误，无法恢复，最多只能打印一条错误信息。对于非致命性的错误，有时可以妥善处理。&lt;/p&gt;
&lt;h3 id=&#34;七用户标识&#34;&gt;七、用户标识&lt;/h3&gt;
&lt;h4 id=&#34;1-用户-id&#34;&gt;1. 用户 ID&lt;/h4&gt;
&lt;p&gt;口令文件登录项中的 &lt;strong&gt;用户 ID（user ID）&lt;/strong&gt;
是一个整数值，它向系统标识各个不同的用户。系统管理员在确定一个用户的登录名的同时，确定其用户
ID。用户不能更改其用户 ID。用户 ID
为 0 的用户称为 &lt;strong&gt;根用户（root）&lt;/strong&gt;
或 &lt;strong&gt;超级用户（superuser）&lt;/strong&gt;。&lt;/p&gt;
&lt;h4 id=&#34;2-组-id&#34;&gt;2. 组 ID&lt;/h4&gt;
&lt;p&gt;口令文件登录项中还包含了用户的 &lt;strong&gt;组 ID（group ID）&lt;/strong&gt;，组 ID
也是由系统管理员在指定用户登录名分配的。多个用户可划分在同一个组
ID，这可以使同组的成员之间共享资源（如文件）。&lt;br&gt;
组文件将组名映射为数值的组 ID，组文件通常是 &lt;code&gt;/etc/group&lt;/code&gt;。&lt;/p&gt;
&lt;h4 id=&#34;3-附属组-id&#34;&gt;3. 附属组 ID&lt;/h4&gt;
&lt;p&gt;大多数 UNIX
系统版本还允许一个用户属于另外一些组。登录时，读取文件&lt;code&gt;/etc/group&lt;/code&gt;，寻找列有该用户作为其成员的前
16 个记录项就可以得到该用户的 &lt;strong&gt;附属组 ID（supplementary group ID）&lt;/strong&gt;。&lt;/p&gt;
&lt;h3 id=&#34;八信号&#34;&gt;八、信号&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;信号（signal）&lt;/strong&gt; 用于通知进程发生了某种情况。进程有以下 3 种处理信号的方式。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;忽略信号。有些异常产生的后果不确定，不推荐使用这种处理方式。&lt;/li&gt;
&lt;li&gt;按系统默认方式处理。&lt;/li&gt;
&lt;li&gt;提供一个函数，信号发生时调用该函数，这称为捕捉该信号。&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;当向一个进程发送信号时，我们必须是那个进程的所有者或者是超级用户。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;九时间值&#34;&gt;九、时间值&lt;/h3&gt;
&lt;p&gt;历史上，UNIX 使用过两种不同的时间值。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;日历时间&lt;/strong&gt;，该值是自 &lt;strong&gt;协调世界时（Coordinated Universal Time，UTC）&lt;/strong&gt; 1970
年 1 月 1 日 00:00:00 这个特定时间以为所经过的秒数。&lt;br&gt;
系统基本数据类型 &lt;code&gt;time_t&lt;/code&gt; 用于保存这种时间值。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;进程时间&lt;/strong&gt;，也被称为 CPU
时间，用以度量进程使用的中央处理器资源。进程时间以时钟滴答计算，每秒钟曾取为
50、60 或 100 个时钟滴答。&lt;br&gt;
系统基本类型 &lt;code&gt;clock_t&lt;/code&gt; 用于保存这种时间值。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;UNIX 系统为一个进程维护了 3 个进程时间值：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;时钟时间&lt;/li&gt;
&lt;li&gt;用户 CPU 时间&lt;/li&gt;
&lt;li&gt;系统 CPU 时间&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;时钟时间&lt;/strong&gt; 又称为 &lt;strong&gt;墙上时钟时间（wall clock
time）&lt;/strong&gt;，它是进程运行的时间总量，其值与系统中同时运行的进程数量有关。&lt;br&gt;
&lt;strong&gt;用户 CPU 时间&lt;/strong&gt; 是指执行用户指令所用的时间量。&lt;br&gt;
&lt;strong&gt;系统 CPU 时间&lt;/strong&gt; 是指为该进程执行内核程序所用的时间量。&lt;/p&gt;
&lt;h3 id=&#34;十系统调用和库函数&#34;&gt;十、系统调用和库函数&lt;/h3&gt;
&lt;p&gt;应用程序既可以调用系统调用也可以调用库函数。很多库函数则会调用系统调用。&lt;br&gt;
系统调用和库函数之间的一个差别是：系统调用通常提供一种最小接口，而库函数通常提供比较复杂的功能。&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
